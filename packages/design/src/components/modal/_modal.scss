@use "sass:map";
@use "../../core/size";
@use "../icon/icon";
@use "../z-index";
@use "../../core/mixins/breakpoints";

$MODAL_SELECTOR: ".modal" !default;
$modal-sizes: (
    "small": var(--f-modal-size-small),
    "medium": var(--f-modal-size-medium),
    "large": var(--f-modal-size-large),
    "fullwidth": var(--f-modal-size-fullwidth),
) !default;
$modal-width: calc(100vw - 40px) !default; // 100% - 20px each side;
$modal-icon-offset: calc(size.$padding-025 / 2);
$modal-icon-alert-offset: -0.05rem;

// @at-root is used to set these classes globally due to styling scope issue where the component is used out of the styling scope
@at-root {
    #{$MODAL_SELECTOR} {
        &__open {
            // both of these properties is used to prevent scrolling in the background
            overflow: hidden;
            position: fixed;
        }
    }
}

#{$MODAL_SELECTOR} {
    &__backdrop {
        background: var(--f-background-overlay);
        display: flex;
        height: 100%;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        position: fixed;
        width: 100%;
        z-index: z-index.$MODAL_BACKDROP_ZINDEX;
    }

    &__outer-container {
        align-items: center;
        display: flex;
        height: 100%;
        justify-content: center;
        overflow: auto;
        width: 100%;
    }

    &__inner-container {
        align-items: center;
        justify-content: center;
        max-height: 100%;
        width: 100%;
    }

    &__shelf {
        justify-content: flex-end;
        display: flex;

        // The button classes have really really high specificy so need to nest
        // this class and chain .button to be able to override it.
        #{$MODAL_SELECTOR}__close-button.button {
            margin: var(--f-modal-close-button-margin);
        }
    }

    &__header {
        display: flex;
        font-size: var(--f-font-size-h4);
        margin-bottom: size.$margin-050;
        width: 100%;
    }

    &__title {
        font-size: var(--f-modal-title-font-size);
        margin-bottom: 0;
        margin-top: 0;
        color: var(--f-text-color-default);

        &-icon {
            height: var(--f-icon-size-large);
            width: var(--f-icon-size-large);
            margin-bottom: 0;
            margin-right: size.$margin-050;
            transform: translateY($modal-icon-offset);

            #{icon.$ICON_SELECTOR} {
                height: 100%;
                width: 100%;
                left: 0;
            }
        }
    }

    &__dialog-container {
        background: transparent;
        display: flex;
        margin: auto;
        width: $modal-width;

        // desktop sizes
        @include breakpoints.breakpoint-up(md) {
            max-width: map.get($modal-sizes, "small");

            @each $key, $size in $modal-sizes {
                &--#{$key} {
                    max-width: $size;
                }
            }

            // @deprecated alias, use --large (to be removed in fkui 4.x)
            &-large {
                max-width: map.get($modal-sizes, "large");
            }

            // @deprecated alias, use --fullwidth (to be removed in fkui 4.x)
            &-fullscreen {
                max-width: map.get($modal-sizes, "fullwidth");
            }
        }

        // mobile sizes
        @include breakpoints.breakpoint-down(sm) {
            &--fullscreen {
                width: 100%;
                max-width: none;

                #{$MODAL_SELECTOR}__dialog {
                    min-height: 100vh;
                }

                #{$MODAL_SELECTOR}__dialog-inner {
                    flex: 1 1 auto;
                    display: flex;
                    flex-direction: column;
                }

                #{$MODAL_SELECTOR}__content {
                    flex: 1 1 auto;
                }
            }
        }
    }

    &__dialog {
        background: var(--f-background-content);
        border-radius: var(--f-border-radius-medium);
        border: var(--f-border-width-medium) solid var(--f-border-color-modal);
        box-shadow: var(--f-box-modal-shadow);
        display: flex;
        flex-direction: column-reverse;
        height: auto;
        margin: auto;
        width: 100%;
        position: relative;
        z-index: z-index.$MODAL_ZINDEX;

        #{$MODAL_SELECTOR}__dialog-inner {
            height: auto;
            margin: 0 size.$margin-150 size.$margin-150;

            @include breakpoints.breakpoint-down(sm) {
                margin: 0 size.$margin-100 size.$margin-100;
            }
        }

        #{$MODAL_SELECTOR}__footer {
            margin-top: size.$margin-200;

            > .button-group {
                margin-bottom: 0;

                .button-group__item:last-child {
                    margin-bottom: 0;
                }

                @include breakpoints.breakpoint-up(md) {
                    .button-group__item {
                        margin-bottom: 0;
                    }
                }
            }
        }

        /// Upper close button-group
        > .button-group {
            margin: 0;

            .button-group__item:last-child {
                margin: var(--f-modal-close-button-margin);
                padding: var(--f-modal-close-button-padding);
            }
        }
    }

    &--information {
        #{$MODAL_SELECTOR}__dialog {
            background-color: var(--f-background-info);
            border-color: var(--f-border-color-info);
        }
    }

    &--warning {
        #{$MODAL_SELECTOR}__dialog {
            background-color: var(--f-background-warning);
            border-color: var(--f-border-color-warning);
        }

        #{$MODAL_SELECTOR}__title-icon {
            .f-icon-alert {
                transform: translateY($modal-icon-alert-offset);
            }
        }
    }

    &--error {
        #{$MODAL_SELECTOR}__dialog {
            background-color: var(--f-background-error);
            border-color: var(--f-border-color-error);
        }
    }
}
